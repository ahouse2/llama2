# syntax=docker/dockerfile:1.6
ARG UBUNTU_VERSION=22.04
FROM ubuntu:${UBUNTU_VERSION}

ENV DEBIAN_FRONTEND=noninteractive \
    POETRY_VERSION=1.8.3 \
    PNPM_VERSION=8.15.6 \
    NODE_VERSION=20.12.2 \
    UV_VERSION=0.4.18 \
    POETRY_VIRTUALENVS_CREATE=false \
    PIP_NO_CACHE_DIR=1

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      bash \
      build-essential \
      ca-certificates \
      curl \
      git \
      openssh-client \
      python3 \
      python3-distutils \
      python3-venv \
      python3-pip \
      unzip \
      xz-utils && \
    rm -rf /var/lib/apt/lists/*

# Install Node.js and pnpm via corepack
RUN curl -fsSL "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz" -o /tmp/node.tar.xz && \
    mkdir -p /opt/node && \
    tar -xJf /tmp/node.tar.xz -C /opt/node --strip-components=1 && \
    rm /tmp/node.tar.xz && \
    ln -s /opt/node/bin/node /usr/local/bin/node && \
    ln -s /opt/node/bin/npm /usr/local/bin/npm && \
    /opt/node/bin/corepack enable && \
    /opt/node/bin/corepack prepare "pnpm@${PNPM_VERSION}" --activate

# Install uv
RUN curl -fsSL "https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/uv-x86_64-unknown-linux-gnu.tar.gz" -o /tmp/uv.tar.gz && \
    tar -xzf /tmp/uv.tar.gz -C /usr/local/bin uv && \
    rm /tmp/uv.tar.gz

# Install Poetry and just
RUN python3 -m pip install "poetry==${POETRY_VERSION}" && \
    curl -fsSL "https://github.com/casey/just/releases/download/1.24.0/just-1.24.0-x86_64-unknown-linux-musl.tar.gz" -o /tmp/just.tar.gz && \
    tar -xzf /tmp/just.tar.gz -C /tmp && \
    mv /tmp/just /usr/local/bin/just && \
    rm /tmp/just.tar.gz

ENV PATH="/opt/node/bin:/usr/local/bin:$PATH" \
    PNPM_HOME=/opt/pnpm \
    UV_CACHE_DIR=/opt/uv-cache

RUN mkdir -p "$PNPM_HOME" "$UV_CACHE_DIR"

WORKDIR /workspace

COPY pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/frontend/package.json apps/frontend/
COPY docs/docusaurus/package.json docs/docusaurus/
COPY apps/backend/pyproject.toml apps/backend/poetry.lock apps/backend/
COPY tests/pyproject.toml tests/poetry.lock tests/

RUN cd apps/backend && poetry install --sync && \
    cd /workspace/tests && poetry install --sync && \
    pnpm install --frozen-lockfile

COPY . .

CMD ["bash"]
