name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  quality:
    name: Quality & Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      POETRY_VIRTUALENVS_CREATE: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv with caching
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
          enable-cache: true
          cache-dependency-glob: |
            apps/backend/pyproject.toml
            apps/backend/poetry.lock
            tests/pyproject.toml
            tests/poetry.lock
        env:
          UV_CACHE_DIR: ${{ runner.temp }}/uv-cache

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==1.8.3"

      - name: Pre-fetch backend wheels via uv
        run: |
          mkdir -p "${{ runner.temp }}/uv-cache"
          poetry -C apps/backend export --without-hashes --format requirements.txt --output /tmp/backend-req.txt
          poetry -C tests export --without-hashes --format requirements.txt --output /tmp/tests-req.txt
          uv pip install --python "$(which python)" --requirement /tmp/backend-req.txt --download-only
          uv pip install --python "$(which python)" --requirement /tmp/tests-req.txt --download-only
        env:
          UV_CACHE_DIR: ${{ runner.temp }}/uv-cache

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.12.2"

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6
          run_install: false
        env:
          PNPM_HOME: ${{ runner.temp }}/pnpm

      - name: Restore pnpm and turbo caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          poetry -C apps/backend install --sync
          poetry -C tests install --sync
          pnpm install --frozen-lockfile
        env:
          PNPM_HOME: ${{ runner.temp }}/pnpm

      - name: Backend quality gates
        run: |
          poetry -C apps/backend run ruff check app tests
          poetry -C apps/backend run mypy app
          poetry -C apps/backend run black --check app tests
          poetry -C apps/backend run pytest

      - name: Integration tests
        run: poetry -C tests run pytest

      - name: Frontend and docs quality gates
        run: |
          pnpm exec turbo run lint --filter=legal-discovery-frontend
          pnpm exec turbo run typecheck --filter=legal-discovery-frontend
          pnpm exec turbo run test --filter=legal-discovery-frontend
          pnpm exec turbo run lint --filter=discovery-docs

      - name: Upload pnpm cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.pnpm-store
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.run_id }}

  container-security:
    name: Container security & SBOM
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
      security-events: write
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            dockerfile: infra/docker/backend.Dockerfile
            image: discovery-backend:ci
          - name: worker
            dockerfile: infra/docker/worker.Dockerfile
            image: discovery-worker:ci
          - name: frontend
            dockerfile: infra/docker/frontend.Dockerfile
            image: discovery-frontend:ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.name }} image
        run: |
          docker buildx build \
            --file ${{ matrix.dockerfile }} \
            --tag ${{ matrix.image }} \
            --load \
            .

      - name: Trivy scan (${{ matrix.name }})
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.image }}
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          format: sarif
          output: trivy-${{ matrix.name }}.sarif

      - name: Snyk scan (${{ matrix.name }})
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          image: ${{ matrix.image }}
          args: --file=${{ matrix.dockerfile }} --severity-threshold=high

      - name: Skip Snyk (token missing)
        if: env.SNYK_TOKEN == ''
        run: echo "SNYK_TOKEN secret not configured; skipping Snyk container scan."

      - name: Generate SBOM (${{ matrix.name }})
        uses: anchore/syft-action@v0.9.0
        with:
          image: ${{ matrix.image }}
          output: sbom-${{ matrix.name }}.spdx.json

      - name: Upload Trivy SARIF (${{ matrix.name }})
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.name }}.sarif

      - name: Upload security artifacts (${{ matrix.name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-security
          path: |
            trivy-${{ matrix.name }}.sarif
            sbom-${{ matrix.name }}.spdx.json
