name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  quality:
    name: Quality & Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      POETRY_VIRTUALENVS_CREATE: "false"
      PNPM_HOME: ${{ runner.temp }}/pnpm
      UV_CACHE_DIR: ${{ runner.temp }}/uv-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv with caching
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
          enable-cache: true
          cache-dependency-glob: |
            apps/backend/pyproject.toml
            apps/backend/poetry.lock
            tests/pyproject.toml
            tests/poetry.lock

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==1.8.3"

      - name: Pre-fetch backend wheels via uv
        run: |
          mkdir -p "$UV_CACHE_DIR"
          poetry -C apps/backend export --without-hashes --format requirements.txt --output /tmp/backend-req.txt
          poetry -C tests export --without-hashes --format requirements.txt --output /tmp/tests-req.txt
          uv pip install --python "$(which python)" --requirement /tmp/backend-req.txt --download-only
          uv pip install --python "$(which python)" --requirement /tmp/tests-req.txt --download-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.12.2"

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6
          run_install: false

      - name: Restore pnpm and turbo caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          poetry -C apps/backend install --sync
          poetry -C tests install --sync
          pnpm install --frozen-lockfile

      - name: Backend quality gates
        run: |
          poetry -C apps/backend run ruff check app tests
          poetry -C apps/backend run mypy app
          poetry -C apps/backend run black --check app tests
          poetry -C apps/backend run pytest

      - name: Integration tests
        run: poetry -C tests run pytest

      - name: Frontend and docs quality gates
        run: |
          pnpm exec turbo run lint --filter=legal-discovery-frontend
          pnpm exec turbo run typecheck --filter=legal-discovery-frontend
          pnpm exec turbo run test --filter=legal-discovery-frontend
          pnpm exec turbo run lint --filter=discovery-docs

      - name: Upload pnpm cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.pnpm-store
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.run_id }}
